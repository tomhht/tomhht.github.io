<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://tomhht.github.io</id>
    <title>hello, world</title>
    <updated>2020-09-01T11:46:51.182Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://tomhht.github.io"/>
    <link rel="self" href="https://tomhht.github.io/atom.xml"/>
    <logo>https://tomhht.github.io/images/avatar.png</logo>
    <icon>https://tomhht.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, hello, world</rights>
    <entry>
        <title type="html"><![CDATA[在CentOS和Ubuntu上安装和配置docker]]></title>
        <id>https://tomhht.github.io/post/zai-centos-he-ubuntu-shang-an-zhuang-he-pei-zhi-docker/</id>
        <link href="https://tomhht.github.io/post/zai-centos-he-ubuntu-shang-an-zhuang-he-pei-zhi-docker/">
        </link>
        <updated>2020-09-01T10:06:21.000Z</updated>
        <summary type="html"><![CDATA[<p>整理docker安装心得。</p>
]]></summary>
        <content type="html"><![CDATA[<p>整理docker安装心得。</p>
<!-- more -->
<p><strong>CentOS</strong></p>
<pre><code># 移除旧版
sudo yum remove docker \
                  docker-client \
                  docker-client-latest \
                  docker-common \
                  docker-latest \
                  docker-latest-logrotate \
                  docker-logrotate \
                  docker-engine
# 设置阿里云仓库repository
sudo yum install -y yum-utils
sudo yum-config-manager \
    --add-repo \
   http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
# 安装docker
sudo yum install docker-ce docker-ce-cli containerd.io
</code></pre>
<p><strong>Ubuntu</strong></p>
<pre><code># 移除旧版
sudo apt-get remove docker docker-engine docker.io containerd runc
# 安装依赖软件
sudo apt-get update
sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    software-properties-common
# 添加Docker官方GPG KEY
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
# 添加官方仓库
sudo add-apt-repository \
   &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable&quot;
# 安装docker
sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io
</code></pre>
<p>以上操作完毕后，继续操作下面通用部分。<br>
<strong>通用</strong></p>
<pre><code># 启动docker
sudo systemctl start docker
# 加入开机启动
sudo systemctl enable docker
# 允许当前用户使用docker
sudo usermod -aG docker ${USER}
# 配置国内加速器（可显著增加docker pull镜像的成功率和速度）
sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'
{
    &quot;registry-mirrors&quot;: [
        &quot;https://dockerhub.azk8s.cn/ &quot;,
        &quot;https://hub-mirror.c.163.com/&quot;,
        &quot;https://docker.mirrors.ustc.edu.cn&quot;
    ]
}
EOF
sudo systemctl daemon-reload
sudo systemctl restart docker
</code></pre>
<hr>
<p>参考链接：<br>
<a href="https://docs.docker.com/engine/install/">https://docs.docker.com/engine/install/</a><br>
<a href="https://developer.aliyun.com/article/763983">https://developer.aliyun.com/article/763983</a><br>
<a href="https://www.jianshu.com/p/5a911f20d93e">https://www.jianshu.com/p/5a911f20d93e</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ubuntu和CentOS端口设置]]></title>
        <id>https://tomhht.github.io/post/ubuntu-he-centos-duan-kou-she-zhi/</id>
        <link href="https://tomhht.github.io/post/ubuntu-he-centos-duan-kou-she-zhi/">
        </link>
        <updated>2020-08-31T09:53:59.000Z</updated>
        <summary type="html"><![CDATA[<p>记录下端口设置，用到啥记录啥。</p>
]]></summary>
        <content type="html"><![CDATA[<p>记录下端口设置，用到啥记录啥。</p>
<!-- more -->
<h1 id="centos">CentOS</h1>
<p>核心指令<code>firewall-cmd</code></p>
<h2 id="查看已开放端口">查看已开放端口</h2>
<pre><code>sudo firewall-cmd --list-ports
</code></pre>
<h2 id="开启端口">开启端口</h2>
<pre><code>sudo firewall-cmd --zone=public --add-port=10250/tcp --permanent
sudo firewall-cmd --zone=public --add-port=30000-32767/tcp --permanent
//--zone: 作用域 
//--add-port=2181/tcp: 要开启的端口号，格式为：端口号/通讯协议 
//--permanent: 使端口永久开放，如不添加，则表示临时有效，开机重启后便会失效
//30000-32767，端口区间
</code></pre>
<h2 id="关闭端口">关闭端口</h2>
<pre><code>sudo firewall-cmd --zone= public --remove-port=6443/tcp --permanent
</code></pre>
<h2 id="reload以便-permanent配置生效">reload以便--permanent配置生效</h2>
<pre><code>sudo firewall-cmd --reload
</code></pre>
<h1 id="ubuntu">Ubuntu</h1>
<p>核心指令<code>ufw</code></p>
<hr>
<p>参考链接：<br>
<a href="https://www.cnblogs.com/Sungeek/p/8257681.html">https://www.cnblogs.com/Sungeek/p/8257681.html</a><br>
<a href="https://blog.csdn.net/Sun_Hui_/article/details/103178840">https://blog.csdn.net/Sun_Hui_/article/details/103178840</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ubuntu和CentOS修改grub]]></title>
        <id>https://tomhht.github.io/post/ubuntu-he-centos-xiu-gai-grub/</id>
        <link href="https://tomhht.github.io/post/ubuntu-he-centos-xiu-gai-grub/">
        </link>
        <updated>2020-08-31T03:19:33.000Z</updated>
        <summary type="html"><![CDATA[<p>grub的修改位置和生效方法。</p>
]]></summary>
        <content type="html"><![CDATA[<p>grub的修改位置和生效方法。</p>
<!-- more -->
<p>grub的修改位置是同样的。</p>
<pre><code>sudo vim /etc/default/grub
</code></pre>
<p>生效方法有区别：</p>
<pre><code>sudo grub2-mkconfig –o /etc/grub2.cfg  #CentOS
sudo update-grub2  #Ubuntu
</code></pre>
<hr>
<p>参考链接：<br>
<a href="https://blog.csdn.net/whatday/article/details/106123164">https://blog.csdn.net/whatday/article/details/106123164</a><br>
<a href="https://www.techbrown.com/change-default-grub2-entries-timeout-centos-7/">https://www.techbrown.com/change-default-grub2-entries-timeout-centos-7/</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在Ubuntu 20.04和CentOS 8上使用kubeadm部署Kubernetes集群]]></title>
        <id>https://tomhht.github.io/post/zai-ubuntu-2004-shang-shi-yong-kubeadm-bu-shu-kubernetes-ji-qun/</id>
        <link href="https://tomhht.github.io/post/zai-ubuntu-2004-shang-shi-yong-kubeadm-bu-shu-kubernetes-ji-qun/">
        </link>
        <updated>2020-08-27T10:40:02.000Z</updated>
        <summary type="html"><![CDATA[<p>本文主要是踩坑后想记录下避坑方法，内容涉及Kubernetes, Kubeadm, Kubectl, Kubelet, Ubuntu, CentOS, Flannel, Docker, 阿里云。</p>
]]></summary>
        <content type="html"><![CDATA[<p>本文主要是踩坑后想记录下避坑方法，内容涉及Kubernetes, Kubeadm, Kubectl, Kubelet, Ubuntu, CentOS, Flannel, Docker, 阿里云。</p>
<!-- more -->
<h1 id="写作背景">写作背景</h1>
<p>初学Kubernetes，虽然网上资源很多，但没一个能彻底搞定，于是杂烩一下。</p>
<h1 id="安装前的准备工作">安装前的准备工作</h1>
<blockquote>
<p>control node（控制节点）、worker node（工作节点） 都要做这些准备工作。</p>
</blockquote>
<h2 id="检查各主机配置">检查各主机配置</h2>
<h3 id="检查cpu和内存">检查cpu和内存</h3>
<p>无论是虚拟机还是物理机，都要求<strong>cpu内核≥2，内存≥2G</strong>。</p>
<h3 id="检查主机名hostname">检查主机名hostname</h3>
<p>hostname要求<strong>不能是 localhost，且不包含下划线、小数点、大写字母</strong>。</p>
<pre><code># 检查hostname
hostname 
# 修改 hostname
hostnamectl set-hostname 名字
# 查看修改结果
hostnamectl status
# 设置 hostname 解析
echo &quot;127.0.0.1   $(hostname)&quot; &gt;&gt; /etc/hosts
</code></pre>
<h3 id="设置固定ip">设置固定IP</h3>
<p>建议使用nmcli配置，因为跨平台（Ubuntu和CentOS）。</p>
<pre><code>nmcli
//如果提示没有安装，先按下面步骤安装
# 安装nmcli
sudo yum install NetworkManager #CentOS
sudo apt-get install network-manager #Ubuntu
# 检查nmcli是否接管了网络管理
nmcli g
//正常是显示绿色的信息。如果STATE列显示disconnected，则Ubuntu要修改/etc/netplan/里的yaml文件，在version下面添加一行renderer: NetworkManager，保存退出后执行sudo systemctl daemon-reload 和 sudo systemctl restart NetworkManager
# 查看当前默认网卡和ip信息
ip route show
ip a
//ip route show 命令中，可以知道机器的网关DNS和默认网卡，如 default via 192.168.127.2 dev ens33，via后面的内容 192.168.127.2 就是网关和DNS，dev后面的内容 ens33 就是默认网卡
//ip a 命令中，可显示默认网卡的 IP 地址，Kubernetes 将使用此 IP 地址与集群内的其他节点通信，如192.168.127.131
//所有节点上 Kubernetes 所使用的 IP 地址必须可以互通（无需 NAT 映射、无安全组或防火墙隔离）
# 设置固定IP，网卡、ip地址、网关、DNS可参考上面的信息
sudo nmcli c mod ens33 \
ipv4.addresses 192.168.127.131/24 \
ipv4.method manual \
ipv4.gateway 192.168.127.2 \
ipv4.dns 192.168.127.2
# 让配置立刻生效
sudo nmcli c up ens33
</code></pre>
<h2 id="创建k8s文件夹">创建k8s文件夹</h2>
<p>存放安装过程所需文件。执行下面代码：</p>
<pre><code>mkdir ~/k8s
</code></pre>
<h2 id="设置iptables">设置iptables</h2>
<p>执行下面代码：</p>
<pre><code>cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
sudo sysctl --system
# 如果想检查配置，可执行
sysctl -n net.bridge.bridge-nf-call-iptables
sysctl -n net.bridge.bridge-nf-call-ip6tables
</code></pre>
<h2 id="打开端口">打开端口</h2>
<h3 id="ubuntu的准备工作centos跳过">Ubuntu的准备工作（CentOS跳过）</h3>
<p>先打开Ubuntu自带的防火墙ufw。执行下面代码：</p>
<pre><code>sudo ufw enable
</code></pre>
<p>执行后提示可能断开连接，直接y继续，别担心，ssh连接不会断。<br>
如果使用ssh连接，还需要执行下面代码，以便打开ssh连接：</p>
<pre><code>sudo ufw allow ssh
</code></pre>
<h3 id="打开相应端口">打开相应端口</h3>
<p>依据所使用的系统（Ubuntu / CentOS），执行相应代码。</p>
<ol>
<li>控制节点 Control-plane nodes</li>
</ol>
<pre><code># Ubuntu
sudo ufw allow 6443/tcp
sudo ufw allow 2379:2380/tcp
sudo ufw allow 10250:10252/tcp
//上面代码中的冒号代表端口区间。

#CentOS
sudo firewall-cmd --zone=public --add-port=6443/tcp --permanent
sudo firewall-cmd --zone=public --add-port=2379-2380/tcp --permanent
sudo firewall-cmd --zone=public --add-port=10250-10252/tcp --permanent
sudo firewall-cmd --reload
</code></pre>
<ol start="2">
<li>工作节点 Worker nodes</li>
</ol>
<pre><code># Ubuntu
sudo ufw allow 10250/tcp
sudo ufw allow 30000:32767/tcp

# CentOS
sudo firewall-cmd --zone=public --add-port=10250/tcp --permanent
sudo firewall-cmd --zone=public --add-port=30000-32767/tcp --permanent
sudo firewall-cmd --reload
</code></pre>
<h2 id="禁用swap">禁用swap</h2>
<p>由于swap性能低下，Kubeadm默认要求禁止使用swap。执行如下代码：</p>
<pre><code>sudo swapoff -a  #临时禁用swap
sudo sed -i 's/.*swap.*/#&amp;/' /etc/fstab  #永久禁用swap
</code></pre>
<p>可通过<code>free -m</code>来检查禁用效果。</p>
<h1 id="安装kubeadm-kubelet和kubectl">安装kubeadm, kubelet和kubectl</h1>
<blockquote>
<p>control node（控制节点）、worker node（工作节点） 上都安装。</p>
</blockquote>
<p><strong>Ubuntu</strong></p>
<pre><code>sudo apt-get update &amp;&amp; sudo apt-get install -y apt-transport-https curl
curl -s https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | sudo apt-key add -
cat &lt;&lt;EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
deb https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial main
EOF
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl
</code></pre>
<p><strong>CentOS</strong></p>
<pre><code>cat &lt;&lt;EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://mirrors.aliyun.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=0
repo_gpgcheck=0
gpgkey=https:/mirrors.aliyun.com/yum/doc/yum-key.gpg https://mirrors.aliyun.com/yum/doc/rpm-package-key.gpg
exclude=kubelet kubeadm kubectl
EOF

# Set SELinux in permissive mode (effectively disabling it)
sudo setenforce 0
sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config

sudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes

sudo systemctl enable --now kubelet
</code></pre>
<h1 id="在control-node控制节点上用kubeadm创建集群">在control node控制节点上用kubeadm创建集群</h1>
<h2 id="初始化集群-方法一推荐能成功就很幸运">初始化集群 - 方法一（推荐，能成功就很幸运）</h2>
<pre><code>kubeadm init --apiserver-advertise-address=你的本机IP \
--pod-network-cidr=10.244.0.0/16 \
--kubernetes-version=v1.18.8 \
--image-repository=registry.cn-hangzhou.aliyuncs.com/google_containers
//--image-repository指定从阿里云拉取所需镜像
#如果安装失败，再试几次，还不行就尝试方法二。
#如果安装成功，则输出类似下面内容，将内容中的`kubeadm join ...`单独保存出来，这是其他节点加入主节点的信息。跳过方法二。
...
...
kubeadm join 192.168.127.132:6443 --token 4pwz11.1m0u1k3ak3ibgx08 \
    --discovery-token-ca-cert-hash sha256:671404c4f80afe5d06d8eefcd5acc6049c4d84f1ebf1091b09bc180ea44e79b7   
</code></pre>
<p>如果安装顺利，<a href="#%E8%B5%8B%E4%BA%88%E5%BD%93%E5%89%8D%E7%94%A8%E6%88%B7%E4%BD%BF%E7%94%A8kubectl%E7%9A%84%E6%9D%83%E9%99%90">点这里跳过方法二</a>。</p>
<h2 id="初始化集群-方法二只在方法一失败的情况下使用">初始化集群 - 方法二（只在方法一失败的情况下使用）</h2>
<p>由于种种原因，国内无法从k8s.gcr.io下载到kubeadm部署所需的文件，以下方法将通过阿里云获取。</p>
<h3 id="准备工作">准备工作</h3>
<h4 id="查看所需镜像">查看所需镜像</h4>
<pre><code>kubeadm config images list
#下面是执行的结果
k8s.gcr.io/kube-apiserver:v1.18.8
k8s.gcr.io/kube-controller-manager:v1.18.8
k8s.gcr.io/kube-scheduler:v1.18.8
k8s.gcr.io/kube-proxy:v1.18.8
k8s.gcr.io/pause:3.2
k8s.gcr.io/etcd:3.4.3-0
k8s.gcr.io/coredns:1.6.7
</code></pre>
<h4 id="在阿里云控制台找到所需镜像">在阿里云控制台找到所需镜像</h4>
<ol>
<li><a href="https://cr.console.aliyun.com/">https://cr.console.aliyun.com/</a>  左侧点”镜像搜索“</li>
<li>分别搜索”kube-apiserver“等所有名称，点开搜索到的镜像，一定找到正确的版本号（如v1.18.8）（日期越新的越容易找到），复制页面中的”公网地址“</li>
</ol>
<h4 id="pull镜像-打标签-移除无用镜像">pull镜像、打标签、移除无用镜像</h4>
<ol>
<li>pull镜像</li>
</ol>
<pre><code>KUBE_VERSION=v1.18.8
PAUSE_VERSION=3.2
ETCD_VERSION=3.4.3-0
CORE_DNS_VERSION=1.6.7
docker pull registry.cn-hangzhou.aliyuncs.com/wyc_google_containers/kube-apiserver:$KUBE_VERSION
docker pull registry.cn-hangzhou.aliyuncs.com/wyc_google_containers/kube-controller-manager:$KUBE_VERSION
docker pull registry.cn-hangzhou.aliyuncs.com/wyc_google_containers/kube-scheduler:$KUBE_VERSION
docker pull registry.cn-hangzhou.aliyuncs.com/wyc_google_containers/kube-proxy:$KUBE_VERSION
docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:$PAUSE_VERSION
docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:$CORE_DNS_VERSION
docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:$ETCD_VERSION
</code></pre>
<ol start="2">
<li>给pull下来的镜像打标签<br>
因为kubeadm部署时会找k8s.gcr.io标签的镜像，因此需要将上一步pull的镜像打上k8s.gcr.io标签。</li>
</ol>
<pre><code>docker tag registry.cn-hangzhou.aliyuncs.com/wyc_google_containers/kube-apiserver:$KUBE_VERSION  k8s.gcr.io/kube-proxy:$KUBE_VERSION
docker tag registry.cn-hangzhou.aliyuncs.com/wyc_google_containers/kube-apiserver:$KUBE_VERSION k8s.gcr.io/kube-controller-manager:$KUBE_VERSION
docker tag registry.cn-hangzhou.aliyuncs.com/wyc_google_containers/kube-apiserver:$KUBE_VERSION k8s.gcr.io/kube-apiserver:$KUBE_VERSION
docker tag registry.cn-hangzhou.aliyuncs.com/wyc_google_containers/kube-apiserver:$KUBE_VERSION k8s.gcr.io/kube-scheduler:$KUBE_VERSION
docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:$PAUSE_VERSION k8s.gcr.io/pause:$PAUSE_VERSION
docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:$CORE_DNS_VERSION k8s.gcr.io/coredns:$CORE_DNS_VERSION
docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:$ETCD_VERSION k8s.gcr.io/etcd:$ETCD_VERSION
</code></pre>
<ol start="3">
<li>移除从阿里云pull下来的镜像</li>
</ol>
<pre><code>docker rmi registry.cn-hangzhou.aliyuncs.com/wyc_google_containers/kube-apiserver:$KUBE_VERSION
docker rmi registry.cn-hangzhou.aliyuncs.com/wyc_google_containers/kube-controller-manager:$KUBE_VERSION
docker rmi registry.cn-hangzhou.aliyuncs.com/wyc_google_containers/kube-scheduler:$KUBE_VERSION
docker rmi registry.cn-hangzhou.aliyuncs.com/wyc_google_containers/kube-proxy:$KUBE_VERSION
docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/pause:$PAUSE_VERSION
docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:$CORE_DNS_VERSION
docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:$ETCD_VERSION
</code></pre>
<h3 id="部署">部署</h3>
<pre><code>kubeadm init --apiserver-advertise-address=你的本机IP --pod-network-cidr=10.244.0.0/16  --kubernetes-version=v1.18.8
#执行后的输出
...
...
kubeadm join 192.168.127.132:6443 --token 4pwz11.1m0u1k3ak3ibgx08 \
    --discovery-token-ca-cert-hash sha256:671404c4f80afe5d06d8eefcd5acc6049c4d84f1ebf1091b09bc180ea44e79b7
</code></pre>
<p>将输出内容中的<code>kubeadm join ...</code>单独保存出来，这是其他节点加入主节点的信息。</p>
<h2 id="赋予当前用户使用kubectl的权限">赋予当前用户使用kubectl的权限</h2>
<pre><code>mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
</code></pre>
<h2 id="安装网络组件flannel">安装网络组件flannel</h2>
<h3 id="准备工作-2">准备工作</h3>
<p>由于种种原因，无法直接pull到网络组件flannel的docker镜像，因此需单独下载。<br>
https://github.com/coreos/flannel/releases/download/v0.12.0/flanneld-v0.12.0-amd64.docker<br>
下载后放进<code>~/k8s</code>，执行命令：</p>
<pre><code>cd ~/k8s
docker load &lt; flanneld-v0.12.0-amd64.docker
</code></pre>
<h3 id="开始安装">开始安装</h3>
<pre><code>wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
kubectl apply -f kube-flannel.yml
</code></pre>
<h2 id="检查部署情况">检查部署情况</h2>
<pre><code>kubectl get nodes
</code></pre>
<p><img src="https://tomhht.github.io/post-images/1598781753839.png" alt="节点运行情况" loading="lazy">     <br /></p>
<pre><code>kubectl get pods -A
</code></pre>
<p><img src="https://tomhht.github.io/post-images/1598781791291.png" alt="Pods运行情况" loading="lazy"><br>
通过<code>docker container ls</code>也可以看到pods里的容器运行情况。</p>
<h2 id="打开kubectl的autocompletion自动完成功能">打开kubectl的autocompletion自动完成功能</h2>
<pre><code>echo 'source &lt;(kubectl completion bash)' &gt;&gt;~/.bashrc
# 执行后，退出shell（如exit）再进入，即可实现自动完成
</code></pre>
<p>以上为control node控制节点的部署全流程。</p>
<hr>
<h1 id="worker-node工作节点加入集群">worker node工作节点加入集群</h1>
<h2 id="安装kubeadm-kubelet和kubectl-2">安装kubeadm, kubelet和kubectl</h2>
<p>在worker node上，按照上面<strong>安装前的准备工作</strong>和<strong>安装kubeadm, kubelet和kubectl</strong>操作。</p>
<h2 id="载入control-node上pull好的镜像">载入control  node上pull好的镜像</h2>
<ol>
<li>在control node上，备份出全套docker镜像（含kubeadm所需镜像+网络组件flannel镜像）：</li>
</ol>
<pre><code>cd ~/k8s
docker save k8s.gcr.io/kube-proxy:v1.18.8 \
k8s.gcr.io/kube-apiserver:v1.18.8 \
k8s.gcr.io/kube-controller-manager:v1.18.8 \
k8s.gcr.io/kube-scheduler:v1.18.8 \
k8s.gcr.io/pause:3.2 \
k8s.gcr.io/coredns:1.6.7 \
k8s.gcr.io/etcd:3.4.3-0 \
quay.io/coreos/flannel:v0.12.0-amd64 &gt; k8s-imagesV1.18.8-flannelV0.12.0.tar
</code></pre>
<blockquote>
<p>之前踩坑，偷懒用IMAGE ID做的备份，结果载入以后name和tag全都是none，还得打name和tag上去，无比繁琐- _ -||</p>
</blockquote>
<ol start="2">
<li>scp上面的备份文件到各个worker node的<code>~/k8s</code>文件夹里</li>
<li>在worker node上载入备份文件：</li>
</ol>
<pre><code>cd ~/k8s
docker load &lt; k8s-imagesV1.18.8-flannelV0.12.0.tar
</code></pre>
<blockquote>
<p>worker node实际需要的只有3个镜像，分别是<code>kube-proxy, pause, flannel</code></p>
</blockquote>
<h2 id="加入集群">加入集群</h2>
<p>执行之前在control node上单独保存出来的<code>kubeadm join...</code>，类似于：</p>
<pre><code>sudo kubeadm join 192.168.127.132:6443 --token rddtz5.mz2v4ee96177eay5     --discovery-token-ca-cert-hash sha256:671404c4f80afe5d06d8eefcd5acc6049c4d84f1ebf1091b09bc180ea44e79b7
</code></pre>
<p>如果join指令没记录下来，或者集群创建已经超过24小时了，那么需要重新生成join指令。在<strong>control node</strong>上执行：</p>
<pre><code>kubeadm token create --print-join-command
</code></pre>
<p>复制输出的内容并在<strong>worker node</strong>上执行即可加入。</p>
<hr>
<h1 id="检查部署结果">检查部署结果</h1>
<p>在control node上执行：</p>
<pre><code>kubectl get nodes -o wide
</code></pre>
<p><img src="https://tomhht.github.io/post-images/1598863291668.png" alt="集群节点信息" loading="lazy"> <br /></p>
<pre><code>kubectl get pods -A -o wide
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://tomhht.github.io/post-images/1598863358214.png" alt="集群pods信息" loading="lazy"></figure>
<hr>
<p>参考链接：<br>
<a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/">https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/</a><br>
<a href="https://www.cnblogs.com/hellxz/p/use-kubeadm-init-kubernetes-cluster.html">https://www.cnblogs.com/hellxz/p/use-kubeadm-init-kubernetes-cluster.html</a><br>
<a href="https://www.kuboard.cn/install/install-k8s.html">https://www.kuboard.cn/install/install-k8s.html</a><br>
<a href="https://blog.csdn.net/LeonardoYasuo/article/details/101483438">https://blog.csdn.net/LeonardoYasuo/article/details/101483438</a><br>
<a href="https://www.cnblogs.com/yinzhengjie/p/12258215.html">https://www.cnblogs.com/yinzhengjie/p/12258215.html</a><br>
<a href="https://developer.aliyun.com/article/763983">https://developer.aliyun.com/article/763983</a></p>
]]></content>
    </entry>
</feed>